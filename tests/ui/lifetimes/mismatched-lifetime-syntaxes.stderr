error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:11:47
   |
LL | fn explicit_bound_ref_to_implicit_ref<'a>(v: &'a u8) -> &u8 {
   |                                               ^^        --- the elided lifetime gets resolved as `'a`
   |                                               |
   |                                               this lifetime flows to the output
   |
note: the lint level is defined here
  --> $DIR/mismatched-lifetime-syntaxes.rs:1:9
   |
LL | #![deny(mismatched_lifetime_syntaxes)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: one option is to consistently use `'a`
   |
LL | fn explicit_bound_ref_to_implicit_ref<'a>(v: &'a u8) -> &'a u8 {
   |                                                          ++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:16:57
   |
LL | fn explicit_bound_ref_to_explicit_anonymous_ref<'a>(v: &'a u8) -> &'_ u8 {
   |                                                         ^^         -- the elided lifetime gets resolved as `'a`
   |                                                         |
   |                                                         this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL - fn explicit_bound_ref_to_explicit_anonymous_ref<'a>(v: &'a u8) -> &'_ u8 {
LL + fn explicit_bound_ref_to_explicit_anonymous_ref<'a>(v: &'a u8) -> &'a u8 {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:23:48
   |
LL | fn implicit_path_to_explicit_anonymous_path(v: ContainsLifetime) -> ContainsLifetime<'_> {
   |                                                ^^^^^^^^^^^^^^^^                      -- the elided lifetime gets resolved as `'_`
   |                                                |
   |                                                this lifetime flows to the output
   |
help: one option is to consistently use `'_`
   |
LL | fn implicit_path_to_explicit_anonymous_path(v: ContainsLifetime<'_>) -> ContainsLifetime<'_> {
   |                                                                ++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:28:65
   |
LL | fn explicit_anonymous_path_to_implicit_path(v: ContainsLifetime<'_>) -> ContainsLifetime {
   |                                                                 ^^      ---------------- the elided lifetime gets resolved as `'_`
   |                                                                 |
   |                                                                 this lifetime flows to the output
   |
help: one option is to consistently use `'_`
   |
LL | fn explicit_anonymous_path_to_implicit_path(v: ContainsLifetime<'_>) -> ContainsLifetime<'_> {
   |                                                                                         ++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:33:65
   |
LL | fn explicit_bound_path_to_implicit_path<'a>(v: ContainsLifetime<'a>) -> ContainsLifetime {
   |                                                                 ^^      ---------------- the elided lifetime gets resolved as `'a`
   |                                                                 |
   |                                                                 this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL | fn explicit_bound_path_to_implicit_path<'a>(v: ContainsLifetime<'a>) -> ContainsLifetime<'a> {
   |                                                                                         ++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:39:25
   |
LL |     v: ContainsLifetime<'a>,
   |                         ^^ this lifetime flows to the output
LL |
LL | ) -> ContainsLifetime<'_> {
   |                       -- the elided lifetime gets resolved as `'a`
   |
help: one option is to consistently use `'a`
   |
LL - ) -> ContainsLifetime<'_> {
LL + ) -> ContainsLifetime<'a> {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:47:37
   |
LL | fn implicit_ref_to_implicit_path(v: &u8) -> ContainsLifetime {
   |                                     ^^^     ---------------- the elided lifetime gets resolved as `'_`
   |                                     |
   |                                     this lifetime flows to the output
   |
help: one option is to consistently use `'_`
   |
LL | fn implicit_ref_to_implicit_path(v: &'_ u8) -> ContainsLifetime<'_> {
   |                                      ++                        ++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:52:48
   |
LL | fn explicit_anonymous_ref_to_implicit_path(v: &'_ u8) -> ContainsLifetime {
   |                                                ^^        ---------------- the elided lifetime gets resolved as `'_`
   |                                                |
   |                                                this lifetime flows to the output
   |
help: one option is to hide the lifetime for references and use the anonymous lifetime for paths
   |
LL - fn explicit_anonymous_ref_to_implicit_path(v: &'_ u8) -> ContainsLifetime {
LL + fn explicit_anonymous_ref_to_implicit_path(v: &u8) -> ContainsLifetime<'_> {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:57:48
   |
LL | fn explicit_bound_ref_to_implicit_path<'a>(v: &'a u8) -> ContainsLifetime {
   |                                                ^^        ---------------- the elided lifetime gets resolved as `'a`
   |                                                |
   |                                                this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL | fn explicit_bound_ref_to_implicit_path<'a>(v: &'a u8) -> ContainsLifetime<'a> {
   |                                                                          ++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:62:58
   |
LL | fn explicit_bound_ref_to_explicit_anonymous_path<'a>(v: &'a u8) -> ContainsLifetime<'_> {
   |                                                          ^^                         -- the elided lifetime gets resolved as `'a`
   |                                                          |
   |                                                          this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL - fn explicit_bound_ref_to_explicit_anonymous_path<'a>(v: &'a u8) -> ContainsLifetime<'_> {
LL + fn explicit_bound_ref_to_explicit_anonymous_path<'a>(v: &'a u8) -> ContainsLifetime<'a> {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:69:37
   |
LL | fn implicit_path_to_implicit_ref(v: ContainsLifetime) -> &u8 {
   |                                     ^^^^^^^^^^^^^^^^     --- the elided lifetime gets resolved as `'_`
   |                                     |
   |                                     this lifetime flows to the output
   |
help: one option is to consistently use `'_`
   |
LL | fn implicit_path_to_implicit_ref(v: ContainsLifetime<'_>) -> &'_ u8 {
   |                                                     ++++      ++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:74:47
   |
LL | fn implicit_path_to_explicit_anonymous_ref(v: ContainsLifetime) -> &'_ u8 {
   |                                               ^^^^^^^^^^^^^^^^      -- the elided lifetime gets resolved as `'_`
   |                                               |
   |                                               this lifetime flows to the output
   |
help: one option is to hide the lifetime for references and use the anonymous lifetime for paths
   |
LL - fn implicit_path_to_explicit_anonymous_ref(v: ContainsLifetime) -> &'_ u8 {
LL + fn implicit_path_to_explicit_anonymous_ref(v: ContainsLifetime<'_>) -> &u8 {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:79:64
   |
LL | fn explicit_bound_path_to_implicit_ref<'a>(v: ContainsLifetime<'a>) -> &u8 {
   |                                                                ^^      --- the elided lifetime gets resolved as `'a`
   |                                                                |
   |                                                                this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL | fn explicit_bound_path_to_implicit_ref<'a>(v: ContainsLifetime<'a>) -> &'a u8 {
   |                                                                         ++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:84:74
   |
LL | fn explicit_bound_path_to_explicit_anonymous_ref<'a>(v: ContainsLifetime<'a>) -> &'_ u8 {
   |                                                                          ^^       -- the elided lifetime gets resolved as `'a`
   |                                                                          |
   |                                                                          this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL - fn explicit_bound_path_to_explicit_anonymous_ref<'a>(v: ContainsLifetime<'a>) -> &'_ u8 {
LL + fn explicit_bound_path_to_explicit_anonymous_ref<'a>(v: ContainsLifetime<'a>) -> &'a u8 {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:90:55
   |
LL |     fn method_explicit_bound_ref_to_implicit_ref<'a>(&'a self) -> &u8 {
   |                                                       ^^          --- the elided lifetime gets resolved as `'a`
   |                                                       |
   |                                                       this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL |     fn method_explicit_bound_ref_to_implicit_ref<'a>(&'a self) -> &'a u8 {
   |                                                                    ++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:95:65
   |
LL |     fn method_explicit_bound_ref_to_explicit_anonymous_ref<'a>(&'a self) -> &'_ u8 {
   |                                                                 ^^           -- the elided lifetime gets resolved as `'a`
   |                                                                 |
   |                                                                 this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL -     fn method_explicit_bound_ref_to_explicit_anonymous_ref<'a>(&'a self) -> &'_ u8 {
LL +     fn method_explicit_bound_ref_to_explicit_anonymous_ref<'a>(&'a self) -> &'a u8 {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:102:56
   |
LL |     fn method_explicit_anonymous_ref_to_implicit_path(&'_ self) -> ContainsLifetime {
   |                                                        ^^          ---------------- the elided lifetime gets resolved as `'_`
   |                                                        |
   |                                                        this lifetime flows to the output
   |
help: one option is to hide the lifetime for references and use the anonymous lifetime for paths
   |
LL -     fn method_explicit_anonymous_ref_to_implicit_path(&'_ self) -> ContainsLifetime {
LL +     fn method_explicit_anonymous_ref_to_implicit_path(&self) -> ContainsLifetime<'_> {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:107:56
   |
LL |     fn method_explicit_bound_ref_to_implicit_path<'a>(&'a self) -> ContainsLifetime {
   |                                                        ^^          ---------------- the elided lifetime gets resolved as `'a`
   |                                                        |
   |                                                        this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL |     fn method_explicit_bound_ref_to_implicit_path<'a>(&'a self) -> ContainsLifetime<'a> {
   |                                                                                    ++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:112:66
   |
LL |     fn method_explicit_bound_ref_to_explicit_anonymous_path<'a>(&'a self) -> ContainsLifetime<'_> {
   |                                                                  ^^                           -- the elided lifetime gets resolved as `'a`
   |                                                                  |
   |                                                                  this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL -     fn method_explicit_bound_ref_to_explicit_anonymous_path<'a>(&'a self) -> ContainsLifetime<'_> {
LL +     fn method_explicit_bound_ref_to_explicit_anonymous_path<'a>(&'a self) -> ContainsLifetime<'a> {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:127:39
   |
LL |     fn static_ref_to_implicit_ref(v: &'static u8) -> &u8 {
   |                                       ^^^^^^^        --- the elided lifetime gets resolved as `'static`
   |                                       |
   |                                       this lifetime flows to the output
   |
help: one option is to consistently use `'static`
   |
LL |     fn static_ref_to_implicit_ref(v: &'static u8) -> &'static u8 {
   |                                                       +++++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:132:49
   |
LL |     fn static_ref_to_explicit_anonymous_ref(v: &'static u8) -> &'_ u8 {
   |                                                 ^^^^^^^         -- the elided lifetime gets resolved as `'static`
   |                                                 |
   |                                                 this lifetime flows to the output
   |
help: one option is to consistently use `'static`
   |
LL -     fn static_ref_to_explicit_anonymous_ref(v: &'static u8) -> &'_ u8 {
LL +     fn static_ref_to_explicit_anonymous_ref(v: &'static u8) -> &'static u8 {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:137:40
   |
LL |     fn static_ref_to_implicit_path(v: &'static u8) -> ContainsLifetime {
   |                                        ^^^^^^^        ---------------- the elided lifetime gets resolved as `'static`
   |                                        |
   |                                        this lifetime flows to the output
   |
help: one option is to consistently use `'static`
   |
LL |     fn static_ref_to_implicit_path(v: &'static u8) -> ContainsLifetime<'static> {
   |                                                                       +++++++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:142:50
   |
LL |     fn static_ref_to_explicit_anonymous_path(v: &'static u8) -> ContainsLifetime<'_> {
   |                                                  ^^^^^^^                         -- the elided lifetime gets resolved as `'static`
   |                                                  |
   |                                                  this lifetime flows to the output
   |
help: one option is to consistently use `'static`
   |
LL -     fn static_ref_to_explicit_anonymous_path(v: &'static u8) -> ContainsLifetime<'_> {
LL +     fn static_ref_to_explicit_anonymous_path(v: &'static u8) -> ContainsLifetime<'static> {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:148:40
   |
LL |         fn static_ref_to_implicit_ref(&'static self) -> &u8 {
   |                                        ^^^^^^^          --- the elided lifetime gets resolved as `'static`
   |                                        |
   |                                        this lifetime flows to the output
   |
help: one option is to consistently use `'static`
   |
LL |         fn static_ref_to_implicit_ref(&'static self) -> &'static u8 {
   |                                                          +++++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:153:50
   |
LL |         fn static_ref_to_explicit_anonymous_ref(&'static self) -> &'_ u8 {
   |                                                  ^^^^^^^           -- the elided lifetime gets resolved as `'static`
   |                                                  |
   |                                                  this lifetime flows to the output
   |
help: one option is to consistently use `'static`
   |
LL -         fn static_ref_to_explicit_anonymous_ref(&'static self) -> &'_ u8 {
LL +         fn static_ref_to_explicit_anonymous_ref(&'static self) -> &'static u8 {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:158:41
   |
LL |         fn static_ref_to_implicit_path(&'static self) -> ContainsLifetime {
   |                                         ^^^^^^^          ---------------- the elided lifetime gets resolved as `'static`
   |                                         |
   |                                         this lifetime flows to the output
   |
help: one option is to consistently use `'static`
   |
LL |         fn static_ref_to_implicit_path(&'static self) -> ContainsLifetime<'static> {
   |                                                                          +++++++++

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:163:51
   |
LL |         fn static_ref_to_explicit_anonymous_path(&'static self) -> ContainsLifetime<'_> {
   |                                                   ^^^^^^^                           -- the elided lifetime gets resolved as `'static`
   |                                                   |
   |                                                   this lifetime flows to the output
   |
help: one option is to consistently use `'static`
   |
LL -         fn static_ref_to_explicit_anonymous_path(&'static self) -> ContainsLifetime<'_> {
LL +         fn static_ref_to_explicit_anonymous_path(&'static self) -> ContainsLifetime<'static> {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:175:55
   |
LL |     fn explicit_bound_ref_to_impl_trait_bound<'a>(v: &'a u8) -> impl FnOnce() + '_ {
   |                                                       ^^                        -- the elided lifetime gets resolved as `'a`
   |                                                       |
   |                                                       this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL -     fn explicit_bound_ref_to_impl_trait_bound<'a>(v: &'a u8) -> impl FnOnce() + '_ {
LL +     fn explicit_bound_ref_to_impl_trait_bound<'a>(v: &'a u8) -> impl FnOnce() + 'a {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:180:65
   |
LL |     fn explicit_bound_ref_to_impl_trait_precise_capture<'a>(v: &'a u8) -> impl FnOnce() + use<'_> {
   |                                                                 ^^                            -- the elided lifetime gets resolved as `'a`
   |                                                                 |
   |                                                                 this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL -     fn explicit_bound_ref_to_impl_trait_precise_capture<'a>(v: &'a u8) -> impl FnOnce() + use<'_> {
LL +     fn explicit_bound_ref_to_impl_trait_precise_capture<'a>(v: &'a u8) -> impl FnOnce() + use<'a> {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:185:72
   |
LL |     fn explicit_bound_path_to_impl_trait_bound<'a>(v: ContainsLifetime<'a>) -> impl FnOnce() + '_ {
   |                                                                        ^^                      -- the elided lifetime gets resolved as `'a`
   |                                                                        |
   |                                                                        this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL -     fn explicit_bound_path_to_impl_trait_bound<'a>(v: ContainsLifetime<'a>) -> impl FnOnce() + '_ {
LL +     fn explicit_bound_path_to_impl_trait_bound<'a>(v: ContainsLifetime<'a>) -> impl FnOnce() + 'a {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:191:29
   |
LL |         v: ContainsLifetime<'a>,
   |                             ^^ this lifetime flows to the output
LL |
LL |     ) -> impl FnOnce() + use<'_> {
   |                              -- the elided lifetime gets resolved as `'a`
   |
help: one option is to consistently use `'a`
   |
LL -     ) -> impl FnOnce() + use<'_> {
LL +     ) -> impl FnOnce() + use<'a> {
   |

error: lifetime flowing from input to output with different syntax
  --> $DIR/mismatched-lifetime-syntaxes.rs:200:33
   |
LL |     fn multiple_outputs<'a>(v: &'a u8) -> (&u8, &u8) {
   |                                 ^^         ---  --- the elided lifetimes get resolved as `'a`
   |                                 |          |
   |                                 |          the elided lifetimes get resolved as `'a`
   |                                 this lifetime flows to the output
   |
help: one option is to consistently use `'a`
   |
LL |     fn multiple_outputs<'a>(v: &'a u8) -> (&'a u8, &'a u8) {
   |                                             ++      ++

error: aborting due to 32 previous errors

